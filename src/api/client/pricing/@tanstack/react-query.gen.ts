// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostApiHaulageHaulageData, PostApiHaulageHaulageError, PostApiHaulageHaulageResponse, PutApiHaulageHaulageByIdData, PutApiHaulageHaulageByIdError, PutApiHaulageHaulageByIdResponse, GetApiHaulageHaulageByIdData, DeleteApiHaulageDeleteHaulageData, DeleteApiHaulageDeleteHaulageError, DeleteApiHaulageDeleteHaulageResponse, PostApiMiscellaneousMiscellaneousData, PostApiMiscellaneousMiscellaneousError, PostApiMiscellaneousMiscellaneousResponse, GetApiMiscellaneousMiscellaneousByPortsData, GetApiMiscellaneousMiscellaneousByIdData, PutApiMiscellaneousMiscellaneousByIdData, PutApiMiscellaneousMiscellaneousByIdError, PutApiMiscellaneousMiscellaneousByIdResponse, DeleteApiMiscellaneousDeleteMiscellaneousData, DeleteApiMiscellaneousDeleteMiscellaneousError, DeleteApiMiscellaneousDeleteMiscellaneousResponse, GetApiPricingHaulagesOfferRequestData, GetApiPricingMiscellaneoussOffersRequestData, GetApiPricingSeaFreightsOffersRequestData, PostApiSeaFreightSeaFreightData, PostApiSeaFreightSeaFreightError, PostApiSeaFreightSeaFreightResponse, PutApiSeaFreightSeaFreightByIdData, PutApiSeaFreightSeaFreightByIdError, PutApiSeaFreightSeaFreightByIdResponse, GetApiSeaFreightSeaFreightByIdData, DeleteApiSeaFreightDeleteSeaFreightsData, DeleteApiSeaFreightDeleteSeaFreightsError, DeleteApiSeaFreightDeleteSeaFreightsResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, postApiHaulageHaulage, putApiHaulageHaulageById, getApiHaulageHaulageById, getApiHaulageHaulages, deleteApiHaulageDeleteHaulage, getApiMiscellaneousMiscellaneous, postApiMiscellaneousMiscellaneous, getApiMiscellaneousMiscellaneousByPorts, getApiMiscellaneousMiscellaneousById, putApiMiscellaneousMiscellaneousById, deleteApiMiscellaneousDeleteMiscellaneous, getApiPricingHaulagesOfferRequest, getApiPricingMiscellaneoussOffersRequest, getApiPricingSeaFreightsOffersRequest, postApiSeaFreightSeaFreight, putApiSeaFreightSeaFreightById, getApiSeaFreightSeaFreightById, getApiSeaFreightGetSeaFreights, deleteApiSeaFreightDeleteSeaFreights } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postApiHaulageHaulageQueryKey = (options?: OptionsLegacyParser<PostApiHaulageHaulageData>) => [
    createQueryKey('postApiHaulageHaulage', options)
];

export const postApiHaulageHaulageOptions = (options?: OptionsLegacyParser<PostApiHaulageHaulageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiHaulageHaulage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiHaulageHaulageQueryKey(options)
    });
};

export const postApiHaulageHaulageMutation = (options?: Partial<OptionsLegacyParser<PostApiHaulageHaulageData>>) => {
    const mutationOptions: UseMutationOptions<PostApiHaulageHaulageResponse, AxiosError<PostApiHaulageHaulageError>, OptionsLegacyParser<PostApiHaulageHaulageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiHaulageHaulage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiHaulageHaulageByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiHaulageHaulageByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiHaulageHaulageByIdResponse, AxiosError<PutApiHaulageHaulageByIdError>, OptionsLegacyParser<PutApiHaulageHaulageByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiHaulageHaulageById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiHaulageHaulageByIdQueryKey = (options: OptionsLegacyParser<GetApiHaulageHaulageByIdData>) => [
    createQueryKey('getApiHaulageHaulageById', options)
];

export const getApiHaulageHaulageByIdOptions = (options: OptionsLegacyParser<GetApiHaulageHaulageByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHaulageHaulageById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHaulageHaulageByIdQueryKey(options)
    });
};

export const getApiHaulageHaulagesQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiHaulageHaulages', options)
];

export const getApiHaulageHaulagesOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHaulageHaulages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHaulageHaulagesQueryKey(options)
    });
};

export const deleteApiHaulageDeleteHaulageMutation = (options?: Partial<OptionsLegacyParser<DeleteApiHaulageDeleteHaulageData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiHaulageDeleteHaulageResponse, AxiosError<DeleteApiHaulageDeleteHaulageError>, OptionsLegacyParser<DeleteApiHaulageDeleteHaulageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiHaulageDeleteHaulage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiMiscellaneousMiscellaneousQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiMiscellaneousMiscellaneous', options)
];

export const getApiMiscellaneousMiscellaneousOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousMiscellaneous({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousMiscellaneousQueryKey(options)
    });
};

export const postApiMiscellaneousMiscellaneousQueryKey = (options?: OptionsLegacyParser<PostApiMiscellaneousMiscellaneousData>) => [
    createQueryKey('postApiMiscellaneousMiscellaneous', options)
];

export const postApiMiscellaneousMiscellaneousOptions = (options?: OptionsLegacyParser<PostApiMiscellaneousMiscellaneousData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiMiscellaneousMiscellaneous({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiMiscellaneousMiscellaneousQueryKey(options)
    });
};

export const postApiMiscellaneousMiscellaneousMutation = (options?: Partial<OptionsLegacyParser<PostApiMiscellaneousMiscellaneousData>>) => {
    const mutationOptions: UseMutationOptions<PostApiMiscellaneousMiscellaneousResponse, AxiosError<PostApiMiscellaneousMiscellaneousError>, OptionsLegacyParser<PostApiMiscellaneousMiscellaneousData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiMiscellaneousMiscellaneous({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiMiscellaneousMiscellaneousByPortsQueryKey = (options?: OptionsLegacyParser<GetApiMiscellaneousMiscellaneousByPortsData>) => [
    createQueryKey('getApiMiscellaneousMiscellaneousByPorts', options)
];

export const getApiMiscellaneousMiscellaneousByPortsOptions = (options?: OptionsLegacyParser<GetApiMiscellaneousMiscellaneousByPortsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousMiscellaneousByPorts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousMiscellaneousByPortsQueryKey(options)
    });
};

export const getApiMiscellaneousMiscellaneousByIdQueryKey = (options: OptionsLegacyParser<GetApiMiscellaneousMiscellaneousByIdData>) => [
    createQueryKey('getApiMiscellaneousMiscellaneousById', options)
];

export const getApiMiscellaneousMiscellaneousByIdOptions = (options: OptionsLegacyParser<GetApiMiscellaneousMiscellaneousByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousMiscellaneousById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousMiscellaneousByIdQueryKey(options)
    });
};

export const putApiMiscellaneousMiscellaneousByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiMiscellaneousMiscellaneousByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiMiscellaneousMiscellaneousByIdResponse, AxiosError<PutApiMiscellaneousMiscellaneousByIdError>, OptionsLegacyParser<PutApiMiscellaneousMiscellaneousByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiMiscellaneousMiscellaneousById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiMiscellaneousDeleteMiscellaneousMutation = (options?: Partial<OptionsLegacyParser<DeleteApiMiscellaneousDeleteMiscellaneousData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiMiscellaneousDeleteMiscellaneousResponse, AxiosError<DeleteApiMiscellaneousDeleteMiscellaneousError>, OptionsLegacyParser<DeleteApiMiscellaneousDeleteMiscellaneousData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiMiscellaneousDeleteMiscellaneous({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPricingHaulagesOfferRequestQueryKey = (options?: OptionsLegacyParser<GetApiPricingHaulagesOfferRequestData>) => [
    createQueryKey('getApiPricingHaulagesOfferRequest', options)
];

export const getApiPricingHaulagesOfferRequestOptions = (options?: OptionsLegacyParser<GetApiPricingHaulagesOfferRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPricingHaulagesOfferRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPricingHaulagesOfferRequestQueryKey(options)
    });
};

export const getApiPricingMiscellaneoussOffersRequestQueryKey = (options?: OptionsLegacyParser<GetApiPricingMiscellaneoussOffersRequestData>) => [
    createQueryKey('getApiPricingMiscellaneoussOffersRequest', options)
];

export const getApiPricingMiscellaneoussOffersRequestOptions = (options?: OptionsLegacyParser<GetApiPricingMiscellaneoussOffersRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPricingMiscellaneoussOffersRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPricingMiscellaneoussOffersRequestQueryKey(options)
    });
};

export const getApiPricingSeaFreightsOffersRequestQueryKey = (options?: OptionsLegacyParser<GetApiPricingSeaFreightsOffersRequestData>) => [
    createQueryKey('getApiPricingSeaFreightsOffersRequest', options)
];

export const getApiPricingSeaFreightsOffersRequestOptions = (options?: OptionsLegacyParser<GetApiPricingSeaFreightsOffersRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPricingSeaFreightsOffersRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPricingSeaFreightsOffersRequestQueryKey(options)
    });
};

export const postApiSeaFreightSeaFreightQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightSeaFreightData>) => [
    createQueryKey('postApiSeaFreightSeaFreight', options)
];

export const postApiSeaFreightSeaFreightOptions = (options?: OptionsLegacyParser<PostApiSeaFreightSeaFreightData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightSeaFreight({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightSeaFreightQueryKey(options)
    });
};

export const postApiSeaFreightSeaFreightMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightSeaFreightData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightSeaFreightResponse, AxiosError<PostApiSeaFreightSeaFreightError>, OptionsLegacyParser<PostApiSeaFreightSeaFreightData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightSeaFreight({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiSeaFreightSeaFreightByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiSeaFreightSeaFreightByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiSeaFreightSeaFreightByIdResponse, AxiosError<PutApiSeaFreightSeaFreightByIdError>, OptionsLegacyParser<PutApiSeaFreightSeaFreightByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiSeaFreightSeaFreightById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightSeaFreightByIdQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightSeaFreightByIdData>) => [
    createQueryKey('getApiSeaFreightSeaFreightById', options)
];

export const getApiSeaFreightSeaFreightByIdOptions = (options: OptionsLegacyParser<GetApiSeaFreightSeaFreightByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightSeaFreightById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightSeaFreightByIdQueryKey(options)
    });
};

export const getApiSeaFreightGetSeaFreightsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiSeaFreightGetSeaFreights', options)
];

export const getApiSeaFreightGetSeaFreightsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightGetSeaFreights({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightGetSeaFreightsQueryKey(options)
    });
};

export const deleteApiSeaFreightDeleteSeaFreightsMutation = (options?: Partial<OptionsLegacyParser<DeleteApiSeaFreightDeleteSeaFreightsData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiSeaFreightDeleteSeaFreightsResponse, AxiosError<DeleteApiSeaFreightDeleteSeaFreightsError>, OptionsLegacyParser<DeleteApiSeaFreightDeleteSeaFreightsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiSeaFreightDeleteSeaFreights({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};