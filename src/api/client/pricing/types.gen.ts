// This file is auto-generated by @hey-api/openapi-ts

export enum ContainerTypeEnum {
    '_20' = 20,
    '_40' = 40
}

export type GroupedMiscellaneousViewModel = {
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    departurePortId?: (number) | null;
    destinationPortId?: (number) | null;
};

export type GroupedServiceMiscellaneousViewModel = {
    serviceId?: number;
    serviceName?: (string) | null;
    suppliers?: Array<GroupedSupplierMiscellaneousViewModel> | null;
};

export type GroupedSupplierMiscellaneousViewModel = {
    miscellaneousId?: string;
    supplierName?: (string) | null;
    validUntil?: Date;
    created?: Date;
    currency?: (string) | null;
    container20?: number;
    container40?: number;
};

export type HaulageGridGetViewModel = {
    loadingCity?: (string) | null;
    loadingPort?: (string) | null;
    hauliers?: Array<HaulageSupplierViewModel> | null;
};

export type HaulageOfferViewModel = {
    haulageId?: string;
    haulierId?: number;
    haulierName?: (string) | null;
    validUntil?: (Date) | null;
    loadingPortId?: number;
    loadingPort?: (string) | null;
    currency?: (string) | null;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    containerNames?: Array<(string)> | null;
    comment?: (string) | null;
    updated?: (Date) | null;
    created?: Date;
};

export type HaulageSupplierViewModel = {
    haulageId?: string;
    haulierName?: (string) | null;
    currency?: (string) | null;
    validUntil?: Date;
    created?: Date;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    haulageType?: (string) | null;
    emptyPickupDepot?: (string) | null;
    containersType?: Array<(string)> | null;
};

export type HaulageViewModel = {
    haulageId?: string;
    haulierId?: number;
    haulierName?: (string) | null;
    validUntil?: Date;
    currency?: (string) | null;
    loadingCityId?: number;
    loadingCity?: (string) | null;
    updated?: (Date) | null;
    loadingPortId?: number;
    loadingPort?: (string) | null;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    haulageType?: (string) | null;
    emptyPickupDepot?: (string) | null;
    comment?: (string) | null;
    containers?: Array<PackageViewModel> | null;
};

export type MiscellaneousOfferViewModel = {
    miscellaneousId?: string;
    supplierName?: (string) | null;
    currency?: (string) | null;
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    comment?: (string) | null;
    updated?: (Date) | null;
    created?: Date;
    price20?: number;
    price40?: number;
    price20dry?: number;
    price20rf?: number;
    price40dry?: number;
    price40hc?: number;
    price40hcrf?: number;
    services?: Array<ServiceViewModel> | null;
};

export type MiscellaneousViewModel = {
    miscellaneousId?: string;
    supplierName?: (string) | null;
    validUntil?: Date;
    created?: Date;
    currency?: (string) | null;
    departurePortId?: (number) | null;
    destinationPortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    supplierId?: number;
    updated?: (Date) | null;
    comment?: (string) | null;
    containers?: Array<ContainerTypeEnum> | null;
    services?: Array<ServiceViewModel> | null;
};

export type PackageViewModel = {
    packageId?: number;
    packageName?: (string) | null;
};

export type SeaFreightOfferViewModel = {
    seaFreightId?: string;
    carrierAgentName?: (string) | null;
    transitTime?: (number) | null;
    frequency?: (number) | null;
    currency?: (string) | null;
    validUntil?: Date;
    services?: Array<ServiceSeaFreightViewModel> | null;
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    carrierName?: (string) | null;
    price20dry?: number;
    price20rf?: number;
    price40dry?: number;
    price40hc?: number;
    price40hcrf?: number;
    comment?: (string) | null;
    lastUpdated?: (Date) | null;
    created?: Date;
};

export type SeaFreightsViewModel = {
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    validCount?: number;
    suppliers?: Array<SupplierSeaFreightViewModel> | null;
};

export type SeaFreightViewModel = {
    seaFreightId?: string;
    carrierAgentName?: (string) | null;
    transitTime?: (number) | null;
    frequency?: (number) | null;
    currency?: (string) | null;
    validUntil?: Date;
    services?: Array<ServiceSeaFreightViewModel> | null;
    departurePortId?: number;
    destinationPortId?: number;
    departurePortName?: (string) | null;
    destinationPortName?: (string) | null;
    carrierId?: number;
    lastUpdated?: (Date) | null;
    carrierName?: (string) | null;
    carrierAgentId?: number;
    comment?: (string) | null;
};

export type ServiceSeaFreightViewModel = {
    seaFreightServiceId?: string;
    service?: ServiceViewModel;
    containers?: Array<PackageViewModel> | null;
};

export type ServiceViewModel = {
    serviceId?: number;
    serviceName?: (string) | null;
    price?: number;
};

export type SupplierSeaFreightViewModel = {
    seaFreightId?: string;
    carrierAgentName?: (string) | null;
    transitTime?: (number) | null;
    frequency?: (number) | null;
    currency?: (string) | null;
    validUntil?: Date;
    services?: Array<ServiceSeaFreightViewModel> | null;
    total20Dry?: number;
    total40Dry?: number;
    total20HCRF?: number;
    total40HC?: number;
    total20RF?: number;
    created?: Date;
};

export type PostApiHaulageHaulageData = {
    body?: HaulageViewModel;
};

export type PostApiHaulageHaulageResponse = (unknown);

export type PostApiHaulageHaulageError = (unknown);

export type PutApiHaulageHaulageByIdData = {
    body?: HaulageViewModel;
    path: {
        id: string;
    };
};

export type PutApiHaulageHaulageByIdResponse = (unknown);

export type PutApiHaulageHaulageByIdError = (unknown);

export type GetApiHaulageHaulageByIdData = {
    path: {
        id: string;
    };
};

export type GetApiHaulageHaulageByIdResponse = (HaulageViewModel);

export type GetApiHaulageHaulageByIdError = (unknown);

export type GetApiHaulageHaulagesResponse = (Array<HaulageGridGetViewModel>);

export type GetApiHaulageHaulagesError = unknown;

export type DeleteApiHaulageDeleteHaulageData = {
    query?: {
        ids?: Array<(string)>;
    };
};

export type DeleteApiHaulageDeleteHaulageResponse = (boolean);

export type DeleteApiHaulageDeleteHaulageError = (unknown);

export type GetApiMiscellaneousMiscellaneousResponse = (Array<GroupedMiscellaneousViewModel>);

export type GetApiMiscellaneousMiscellaneousError = (unknown);

export type PostApiMiscellaneousMiscellaneousData = {
    body?: MiscellaneousViewModel;
};

export type PostApiMiscellaneousMiscellaneousResponse = (unknown);

export type PostApiMiscellaneousMiscellaneousError = (unknown);

export type GetApiMiscellaneousMiscellaneousByPortsData = {
    query?: {
        departurePortId?: number;
        destinationPortId?: number;
    };
};

export type GetApiMiscellaneousMiscellaneousByPortsResponse = (Array<GroupedServiceMiscellaneousViewModel>);

export type GetApiMiscellaneousMiscellaneousByPortsError = (unknown);

export type GetApiMiscellaneousMiscellaneousByIdData = {
    path: {
        id: string;
    };
};

export type GetApiMiscellaneousMiscellaneousByIdResponse = (MiscellaneousViewModel);

export type GetApiMiscellaneousMiscellaneousByIdError = (unknown);

export type PutApiMiscellaneousMiscellaneousByIdData = {
    body?: MiscellaneousViewModel;
    path: {
        id: string;
    };
};

export type PutApiMiscellaneousMiscellaneousByIdResponse = (unknown);

export type PutApiMiscellaneousMiscellaneousByIdError = (unknown);

export type DeleteApiMiscellaneousDeleteMiscellaneousData = {
    query?: {
        ids?: Array<(string)>;
    };
};

export type DeleteApiMiscellaneousDeleteMiscellaneousResponse = (boolean);

export type DeleteApiMiscellaneousDeleteMiscellaneousError = (unknown);

export type GetApiPricingHaulagesOfferRequestData = {
    query?: {
        ContainerIdsType?: Array<(number)>;
        HaulageType?: string;
        LoadingCity?: string;
        LoadingPortId?: number;
        PlannedDeparture?: Date;
    };
};

export type GetApiPricingHaulagesOfferRequestResponse = (Array<HaulageOfferViewModel>);

export type GetApiPricingHaulagesOfferRequestError = unknown;

export type GetApiPricingMiscellaneoussOffersRequestData = {
    query?: {
        ContainerTypesId?: Array<(number)>;
        DeparturePortId?: number;
        DestinationPortId?: number;
        Package20?: boolean;
        Package40?: boolean;
        PlannedDeparture?: Date;
    };
};

export type GetApiPricingMiscellaneoussOffersRequestResponse = (Array<MiscellaneousOfferViewModel>);

export type GetApiPricingMiscellaneoussOffersRequestError = unknown;

export type GetApiPricingSeaFreightsOffersRequestData = {
    query?: {
        ContainerTypesId?: Array<(number)>;
        DeparturePortId?: number;
        DestinationPortId?: number;
        PlannedDeparture?: Date;
    };
};

export type GetApiPricingSeaFreightsOffersRequestResponse = (Array<SeaFreightOfferViewModel>);

export type GetApiPricingSeaFreightsOffersRequestError = unknown;

export type PostApiSeaFreightSeaFreightData = {
    body?: SeaFreightViewModel;
};

export type PostApiSeaFreightSeaFreightResponse = (unknown);

export type PostApiSeaFreightSeaFreightError = (unknown);

export type PutApiSeaFreightSeaFreightByIdData = {
    body?: SeaFreightViewModel;
    path: {
        id: string;
    };
};

export type PutApiSeaFreightSeaFreightByIdResponse = (unknown);

export type PutApiSeaFreightSeaFreightByIdError = (unknown);

export type GetApiSeaFreightSeaFreightByIdData = {
    path: {
        id: string;
    };
};

export type GetApiSeaFreightSeaFreightByIdResponse = (SeaFreightViewModel);

export type GetApiSeaFreightSeaFreightByIdError = (unknown);

export type GetApiSeaFreightGetSeaFreightsResponse = (Array<SeaFreightsViewModel>);

export type GetApiSeaFreightGetSeaFreightsError = (unknown);

export type DeleteApiSeaFreightDeleteSeaFreightsData = {
    query?: {
        ids?: Array<(string)>;
    };
};

export type DeleteApiSeaFreightDeleteSeaFreightsResponse = (boolean);

export type DeleteApiSeaFreightDeleteSeaFreightsError = (unknown);

export type GetApiHaulageHaulageByIdResponseTransformer = (data: any) => Promise<GetApiHaulageHaulageByIdResponse>;

export type HaulageViewModelModelResponseTransformer = (data: any) => HaulageViewModel;

export const HaulageViewModelModelResponseTransformer: HaulageViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiHaulageHaulageByIdResponseTransformer: GetApiHaulageHaulageByIdResponseTransformer = async (data) => {
    HaulageViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiHaulageHaulagesResponseTransformer = (data: any) => Promise<GetApiHaulageHaulagesResponse>;

export type HaulageGridGetViewModelModelResponseTransformer = (data: any) => HaulageGridGetViewModel;

export type HaulageSupplierViewModelModelResponseTransformer = (data: any) => HaulageSupplierViewModel;

export const HaulageSupplierViewModelModelResponseTransformer: HaulageSupplierViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const HaulageGridGetViewModelModelResponseTransformer: HaulageGridGetViewModelModelResponseTransformer = data => {
    if (Array.isArray(data?.hauliers)) {
        data.hauliers.forEach(HaulageSupplierViewModelModelResponseTransformer);
    }
    return data;
};

export const GetApiHaulageHaulagesResponseTransformer: GetApiHaulageHaulagesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(HaulageGridGetViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiMiscellaneousMiscellaneousByPortsResponseTransformer = (data: any) => Promise<GetApiMiscellaneousMiscellaneousByPortsResponse>;

export type GroupedServiceMiscellaneousViewModelModelResponseTransformer = (data: any) => GroupedServiceMiscellaneousViewModel;

export type GroupedSupplierMiscellaneousViewModelModelResponseTransformer = (data: any) => GroupedSupplierMiscellaneousViewModel;

export const GroupedSupplierMiscellaneousViewModelModelResponseTransformer: GroupedSupplierMiscellaneousViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const GroupedServiceMiscellaneousViewModelModelResponseTransformer: GroupedServiceMiscellaneousViewModelModelResponseTransformer = data => {
    if (Array.isArray(data?.suppliers)) {
        data.suppliers.forEach(GroupedSupplierMiscellaneousViewModelModelResponseTransformer);
    }
    return data;
};

export const GetApiMiscellaneousMiscellaneousByPortsResponseTransformer: GetApiMiscellaneousMiscellaneousByPortsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(GroupedServiceMiscellaneousViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiMiscellaneousMiscellaneousByIdResponseTransformer = (data: any) => Promise<GetApiMiscellaneousMiscellaneousByIdResponse>;

export type MiscellaneousViewModelModelResponseTransformer = (data: any) => MiscellaneousViewModel;

export const MiscellaneousViewModelModelResponseTransformer: MiscellaneousViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiMiscellaneousMiscellaneousByIdResponseTransformer: GetApiMiscellaneousMiscellaneousByIdResponseTransformer = async (data) => {
    MiscellaneousViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiPricingHaulagesOfferRequestResponseTransformer = (data: any) => Promise<GetApiPricingHaulagesOfferRequestResponse>;

export type HaulageOfferViewModelModelResponseTransformer = (data: any) => HaulageOfferViewModel;

export const HaulageOfferViewModelModelResponseTransformer: HaulageOfferViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const GetApiPricingHaulagesOfferRequestResponseTransformer: GetApiPricingHaulagesOfferRequestResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(HaulageOfferViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiPricingMiscellaneoussOffersRequestResponseTransformer = (data: any) => Promise<GetApiPricingMiscellaneoussOffersRequestResponse>;

export type MiscellaneousOfferViewModelModelResponseTransformer = (data: any) => MiscellaneousOfferViewModel;

export const MiscellaneousOfferViewModelModelResponseTransformer: MiscellaneousOfferViewModelModelResponseTransformer = data => {
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const GetApiPricingMiscellaneoussOffersRequestResponseTransformer: GetApiPricingMiscellaneoussOffersRequestResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MiscellaneousOfferViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiPricingSeaFreightsOffersRequestResponseTransformer = (data: any) => Promise<GetApiPricingSeaFreightsOffersRequestResponse>;

export type SeaFreightOfferViewModelModelResponseTransformer = (data: any) => SeaFreightOfferViewModel;

export const SeaFreightOfferViewModelModelResponseTransformer: SeaFreightOfferViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.lastUpdated) {
        data.lastUpdated = new Date(data.lastUpdated);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const GetApiPricingSeaFreightsOffersRequestResponseTransformer: GetApiPricingSeaFreightsOffersRequestResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(SeaFreightOfferViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiSeaFreightSeaFreightByIdResponseTransformer = (data: any) => Promise<GetApiSeaFreightSeaFreightByIdResponse>;

export type SeaFreightViewModelModelResponseTransformer = (data: any) => SeaFreightViewModel;

export const SeaFreightViewModelModelResponseTransformer: SeaFreightViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.lastUpdated) {
        data.lastUpdated = new Date(data.lastUpdated);
    }
    return data;
};

export const GetApiSeaFreightSeaFreightByIdResponseTransformer: GetApiSeaFreightSeaFreightByIdResponseTransformer = async (data) => {
    SeaFreightViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightGetSeaFreightsResponseTransformer = (data: any) => Promise<GetApiSeaFreightGetSeaFreightsResponse>;

export type SeaFreightsViewModelModelResponseTransformer = (data: any) => SeaFreightsViewModel;

export type SupplierSeaFreightViewModelModelResponseTransformer = (data: any) => SupplierSeaFreightViewModel;

export const SupplierSeaFreightViewModelModelResponseTransformer: SupplierSeaFreightViewModelModelResponseTransformer = data => {
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const SeaFreightsViewModelModelResponseTransformer: SeaFreightsViewModelModelResponseTransformer = data => {
    if (Array.isArray(data?.suppliers)) {
        data.suppliers.forEach(SupplierSeaFreightViewModelModelResponseTransformer);
    }
    return data;
};

export const GetApiSeaFreightGetSeaFreightsResponseTransformer: GetApiSeaFreightGetSeaFreightsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(SeaFreightsViewModelModelResponseTransformer);
    }
    return data;
};