// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetContactGetContactsData, PostContactCreateContactData, PostContactCreateContactError, PostContactCreateContactResponse, GetContactGetContactByIdByIdData, PutContactUpdateContactByIdData, PutContactUpdateContactByIdError, PutContactUpdateContactByIdResponse, DeleteContactDeleteContactByIdData, DeleteContactDeleteContactByIdError, DeleteContactDeleteContactByIdResponse } from '../types.gen';
import { client, getContactGetContacts, postContactCreateContact, getContactGetContactByIdById, putContactUpdateContactById, deleteContactDeleteContactById } from '../sdk.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getContactGetContactsQueryKey = (options?: OptionsLegacyParser<GetContactGetContactsData>) => [
    createQueryKey('getContactGetContacts', options)
];

export const getContactGetContactsOptions = (options?: OptionsLegacyParser<GetContactGetContactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContactGetContacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContactGetContactsQueryKey(options)
    });
};

export const postContactCreateContactQueryKey = (options?: OptionsLegacyParser<PostContactCreateContactData>) => [
    createQueryKey('postContactCreateContact', options)
];

export const postContactCreateContactOptions = (options?: OptionsLegacyParser<PostContactCreateContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postContactCreateContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postContactCreateContactQueryKey(options)
    });
};

export const postContactCreateContactMutation = (options?: Partial<OptionsLegacyParser<PostContactCreateContactData>>) => {
    const mutationOptions: UseMutationOptions<PostContactCreateContactResponse, AxiosError<PostContactCreateContactError>, OptionsLegacyParser<PostContactCreateContactData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postContactCreateContact({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getContactGetContactByIdByIdQueryKey = (options: OptionsLegacyParser<GetContactGetContactByIdByIdData>) => [
    createQueryKey('getContactGetContactByIdById', options)
];

export const getContactGetContactByIdByIdOptions = (options: OptionsLegacyParser<GetContactGetContactByIdByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContactGetContactByIdById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContactGetContactByIdByIdQueryKey(options)
    });
};

export const putContactUpdateContactByIdMutation = (options?: Partial<OptionsLegacyParser<PutContactUpdateContactByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutContactUpdateContactByIdResponse, AxiosError<PutContactUpdateContactByIdError>, OptionsLegacyParser<PutContactUpdateContactByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putContactUpdateContactById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteContactDeleteContactByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteContactDeleteContactByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteContactDeleteContactByIdResponse, AxiosError<DeleteContactDeleteContactByIdError>, OptionsLegacyParser<DeleteContactDeleteContactByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteContactDeleteContactById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};