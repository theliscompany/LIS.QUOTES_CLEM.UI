// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-axios";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  PostApiFileUploadData,
  PostApiFileUploadError,
  PostApiFileUploadResponse,
  GetApiFileByFolderByFileNameData,
  DeleteApiFileByFolderByFileNameData,
  DeleteApiFileByFolderByFileNameError,
  DeleteApiFileByFolderByFileNameResponse,
  GetApiFileByFolderData,
} from "../types.gen";
import type { AxiosError } from "axios";
import { client, FileService } from "../sdk.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const postApiFileUploadQueryKey = (
  options?: OptionsLegacyParser<PostApiFileUploadData>,
) => [createQueryKey("postApiFileUpload", options)];

export const postApiFileUploadOptions = (
  options?: OptionsLegacyParser<PostApiFileUploadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FileService.postApiFileUpload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiFileUploadQueryKey(options),
  });
};

export const postApiFileUploadMutation = (
  options?: Partial<OptionsLegacyParser<PostApiFileUploadData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiFileUploadResponse,
    AxiosError<PostApiFileUploadError>,
    OptionsLegacyParser<PostApiFileUploadData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await FileService.postApiFileUpload({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiFileByFolderByFileNameQueryKey = (
  options: OptionsLegacyParser<GetApiFileByFolderByFileNameData>,
) => [createQueryKey("getApiFileByFolderByFileName", options)];

export const getApiFileByFolderByFileNameOptions = (
  options: OptionsLegacyParser<GetApiFileByFolderByFileNameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FileService.getApiFileByFolderByFileName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFileByFolderByFileNameQueryKey(options),
  });
};

export const deleteApiFileByFolderByFileNameMutation = (
  options?: Partial<OptionsLegacyParser<DeleteApiFileByFolderByFileNameData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteApiFileByFolderByFileNameResponse,
    AxiosError<DeleteApiFileByFolderByFileNameError>,
    OptionsLegacyParser<DeleteApiFileByFolderByFileNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await FileService.deleteApiFileByFolderByFileName({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiFileByFolderQueryKey = (
  options: OptionsLegacyParser<GetApiFileByFolderData>,
) => [createQueryKey("getApiFileByFolder", options)];

export const getApiFileByFolderOptions = (
  options: OptionsLegacyParser<GetApiFileByFolderData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FileService.getApiFileByFolder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFileByFolderQueryKey(options),
  });
};
