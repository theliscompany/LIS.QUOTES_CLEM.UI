// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, getCity, getPackage, getPort, postPort, getPortById, putPortById, deletePortById, getProduct, postProduct, getProductById, putProductById, deleteProductById, postService, getService, getServiceById, putServiceById, deleteServiceById } from '../sdk.gen';
import type { GetPackageData, PostPortData, PostPortError, PostPortResponse, GetPortByIdData, PutPortByIdData, PutPortByIdError, PutPortByIdResponse, DeletePortByIdData, DeletePortByIdError, DeletePortByIdResponse, PostProductData, PostProductError, PostProductResponse, GetProductByIdData, PutProductByIdData, PutProductByIdError, PutProductByIdResponse, DeleteProductByIdData, DeleteProductByIdError, DeleteProductByIdResponse, PostServiceData, PostServiceError, PostServiceResponse, GetServiceByIdData, PutServiceByIdData, PutServiceByIdError, PutServiceByIdResponse, DeleteServiceByIdData, DeleteServiceByIdError, DeleteServiceByIdResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getCityQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getCity', options)
];

export const getCityOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCityQueryKey(options)
    });
};

export const getPackageQueryKey = (options?: OptionsLegacyParser<GetPackageData>) => [
    createQueryKey('getPackage', options)
];

export const getPackageOptions = (options?: OptionsLegacyParser<GetPackageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPackage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPackageQueryKey(options)
    });
};

export const getPortQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getPort', options)
];

export const getPortOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPort({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPortQueryKey(options)
    });
};

export const postPortQueryKey = (options?: OptionsLegacyParser<PostPortData>) => [
    createQueryKey('postPort', options)
];

export const postPortOptions = (options?: OptionsLegacyParser<PostPortData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPort({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPortQueryKey(options)
    });
};

export const postPortMutation = (options?: Partial<OptionsLegacyParser<PostPortData>>) => {
    const mutationOptions: UseMutationOptions<PostPortResponse, AxiosError<PostPortError>, OptionsLegacyParser<PostPortData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPort({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPortByIdQueryKey = (options: OptionsLegacyParser<GetPortByIdData>) => [
    createQueryKey('getPortById', options)
];

export const getPortByIdOptions = (options: OptionsLegacyParser<GetPortByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPortById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPortByIdQueryKey(options)
    });
};

export const putPortByIdMutation = (options?: Partial<OptionsLegacyParser<PutPortByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutPortByIdResponse, AxiosError<PutPortByIdError>, OptionsLegacyParser<PutPortByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putPortById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deletePortByIdMutation = (options?: Partial<OptionsLegacyParser<DeletePortByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeletePortByIdResponse, AxiosError<DeletePortByIdError>, OptionsLegacyParser<DeletePortByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePortById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProductQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getProduct', options)
];

export const getProductOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProductQueryKey(options)
    });
};

export const postProductQueryKey = (options?: OptionsLegacyParser<PostProductData>) => [
    createQueryKey('postProduct', options)
];

export const postProductOptions = (options?: OptionsLegacyParser<PostProductData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postProductQueryKey(options)
    });
};

export const postProductMutation = (options?: Partial<OptionsLegacyParser<PostProductData>>) => {
    const mutationOptions: UseMutationOptions<PostProductResponse, AxiosError<PostProductError>, OptionsLegacyParser<PostProductData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postProduct({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProductByIdQueryKey = (options: OptionsLegacyParser<GetProductByIdData>) => [
    createQueryKey('getProductById', options)
];

export const getProductByIdOptions = (options: OptionsLegacyParser<GetProductByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProductById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProductByIdQueryKey(options)
    });
};

export const putProductByIdMutation = (options?: Partial<OptionsLegacyParser<PutProductByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutProductByIdResponse, AxiosError<PutProductByIdError>, OptionsLegacyParser<PutProductByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putProductById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteProductByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteProductByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteProductByIdResponse, AxiosError<DeleteProductByIdError>, OptionsLegacyParser<DeleteProductByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProductById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postServiceQueryKey = (options?: OptionsLegacyParser<PostServiceData>) => [
    createQueryKey('postService', options)
];

export const postServiceOptions = (options?: OptionsLegacyParser<PostServiceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postService({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postServiceQueryKey(options)
    });
};

export const postServiceMutation = (options?: Partial<OptionsLegacyParser<PostServiceData>>) => {
    const mutationOptions: UseMutationOptions<PostServiceResponse, AxiosError<PostServiceError>, OptionsLegacyParser<PostServiceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postService({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getServiceQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getService', options)
];

export const getServiceOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getService({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getServiceQueryKey(options)
    });
};

export const getServiceByIdQueryKey = (options: OptionsLegacyParser<GetServiceByIdData>) => [
    createQueryKey('getServiceById', options)
];

export const getServiceByIdOptions = (options: OptionsLegacyParser<GetServiceByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getServiceById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getServiceByIdQueryKey(options)
    });
};

export const putServiceByIdMutation = (options?: Partial<OptionsLegacyParser<PutServiceByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutServiceByIdResponse, AxiosError<PutServiceByIdError>, OptionsLegacyParser<PutServiceByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putServiceById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteServiceByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteServiceByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteServiceByIdResponse, AxiosError<DeleteServiceByIdError>, OptionsLegacyParser<DeleteServiceByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteServiceById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};