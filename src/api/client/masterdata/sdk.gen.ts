// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { GetCityError, GetCityResponse, GetPackageData, GetPackageError, GetPackageResponse, GetPortError, GetPortResponse, PostPortData, PostPortError, PostPortResponse, GetPortByIdData, GetPortByIdError, GetPortByIdResponse, PutPortByIdData, PutPortByIdError, PutPortByIdResponse, DeletePortByIdData, DeletePortByIdError, DeletePortByIdResponse, GetProductError, GetProductResponse, PostProductData, PostProductError, PostProductResponse, GetProductByIdData, GetProductByIdError, GetProductByIdResponse, PutProductByIdData, PutProductByIdError, PutProductByIdResponse, DeleteProductByIdData, DeleteProductByIdError, DeleteProductByIdResponse, PostServiceData, PostServiceError, PostServiceResponse, GetServiceError, GetServiceResponse, GetServiceByIdData, GetServiceByIdError, GetServiceByIdResponse, PutServiceByIdData, PutServiceByIdError, PutServiceByIdResponse, DeleteServiceByIdData, DeleteServiceByIdError, DeleteServiceByIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Retrieve all cities
 */
export const getCity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCityResponse, GetCityError, ThrowOnError>({
        ...options,
        url: '/City'
    });
};

/**
 * Retrieve all packages
 */
export const getPackage = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetPackageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPackageResponse, GetPackageError, ThrowOnError>({
        ...options,
        url: '/Package'
    });
};

/**
 * Retrieve all ports
 */
export const getPort = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPortResponse, GetPortError, ThrowOnError>({
        ...options,
        url: '/Port'
    });
};

/**
 * Create port
 */
export const postPort = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPortResponse, PostPortError, ThrowOnError>({
        ...options,
        url: '/Port'
    });
};

/**
 * Retrieve port by id
 */
export const getPortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPortByIdResponse, GetPortByIdError, ThrowOnError>({
        ...options,
        url: '/Port/{id}'
    });
};

/**
 * Update port
 */
export const putPortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutPortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutPortByIdResponse, PutPortByIdError, ThrowOnError>({
        ...options,
        url: '/Port/{id}'
    });
};

/**
 * Delete port
 */
export const deletePortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeletePortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePortByIdResponse, DeletePortByIdError, ThrowOnError>({
        ...options,
        url: '/Port/{id}'
    });
};

/**
 * Retrieve all products
 */
export const getProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductResponse, GetProductError, ThrowOnError>({
        ...options,
        url: '/Product'
    });
};

/**
 * Create product
 */
export const postProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostProductData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProductResponse, PostProductError, ThrowOnError>({
        ...options,
        url: '/Product'
    });
};

/**
 * Retrieve product by id
 */
export const getProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductByIdResponse, GetProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

/**
 * Update product
 */
export const putProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutProductByIdResponse, PutProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

/**
 * Delete product
 */
export const deleteProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProductByIdResponse, DeleteProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

/**
 * Create service
 */
export const postService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostServiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostServiceResponse, PostServiceError, ThrowOnError>({
        ...options,
        url: '/Service'
    });
};

/**
 * Retrieve services and types
 */
export const getService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetServiceResponse, GetServiceError, ThrowOnError>({
        ...options,
        url: '/Service'
    });
};

/**
 * Retrieve service and types
 */
export const getServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetServiceByIdResponse, GetServiceByIdError, ThrowOnError>({
        ...options,
        url: '/Service/{id}'
    });
};

/**
 * Update service
 */
export const putServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutServiceByIdResponse, PutServiceByIdError, ThrowOnError>({
        ...options,
        url: '/Service/{id}'
    });
};

/**
 * Delete service
 */
export const deleteServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteServiceByIdResponse, DeleteServiceByIdError, ThrowOnError>({
        ...options,
        url: '/Service/{id}'
    });
};