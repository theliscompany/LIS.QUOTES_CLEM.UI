// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { GetCityCitiesError, GetCityCitiesResponse, GetPackageContainersData, GetPackageContainersError, GetPackageContainersResponse, GetPortsData, GetPortsError, GetPortsResponse, GetPortData, GetPortError, GetPortResponse, CreatePortData, CreatePortError, CreatePortResponse, UpdatePortData, UpdatePortError, UpdatePortResponse, DeletePortData, DeletePortError, DeletePortResponse, GetProductData, GetProductError, GetProductResponse, PostProductData, PostProductError, PostProductResponse, GetProductByIdData, GetProductByIdError, GetProductByIdResponse, PutProductByIdData, PutProductByIdError, PutProductByIdResponse, DeleteProductByIdData, DeleteProductByIdError, DeleteProductByIdResponse, PostServiceData, PostServiceError, PostServiceResponse, GetServiceData, GetServiceError, GetServiceResponse, GetServiceByServiceIdData, GetServiceByServiceIdError, GetServiceByServiceIdResponse, PutServiceByServiceIdData, PutServiceByServiceIdError, PutServiceByServiceIdResponse, DeleteServiceByServiceIdData, DeleteServiceByServiceIdError, DeleteServiceByServiceIdResponse } from './types.gen';

export const client = createClient(createConfig());

export const getCityCities = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCityCitiesResponse, GetCityCitiesError, ThrowOnError>({
        ...options,
        url: '/City/Cities'
    });
};

export const getPackageContainers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetPackageContainersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPackageContainersResponse, GetPackageContainersError, ThrowOnError>({
        ...options,
        url: '/Package/Containers'
    });
};

export const getPorts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetPortsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPortsResponse, GetPortsError, ThrowOnError>({
        ...options,
        url: '/Port/Ports'
    });
};

export const getPort = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPortData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPortResponse, GetPortError, ThrowOnError>({
        ...options,
        url: '/Port/GetPort/{id}'
    });
};

export const createPort = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<CreatePortData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePortResponse, CreatePortError, ThrowOnError>({
        ...options,
        url: '/Port/CreatePort'
    });
};

export const updatePort = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePortData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePortResponse, UpdatePortError, ThrowOnError>({
        ...options,
        url: '/Port/UpdatePort/{id}'
    });
};

export const deletePort = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeletePortData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePortResponse, DeletePortError, ThrowOnError>({
        ...options,
        url: '/Port/DeletePort/{id}'
    });
};

export const getProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetProductData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductResponse, GetProductError, ThrowOnError>({
        ...options,
        url: '/Product'
    });
};

export const postProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostProductData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProductResponse, PostProductError, ThrowOnError>({
        ...options,
        url: '/Product'
    });
};

export const getProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductByIdResponse, GetProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

export const putProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutProductByIdResponse, PutProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

export const deleteProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProductByIdResponse, DeleteProductByIdError, ThrowOnError>({
        ...options,
        url: '/Product/{id}'
    });
};

export const postService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostServiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostServiceResponse, PostServiceError, ThrowOnError>({
        ...options,
        url: '/Service'
    });
};

/**
 * Retrieve services and types
 */
export const getService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetServiceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetServiceResponse, GetServiceError, ThrowOnError>({
        ...options,
        url: '/Service'
    });
};

export const getServiceByServiceId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetServiceByServiceIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetServiceByServiceIdResponse, GetServiceByServiceIdError, ThrowOnError>({
        ...options,
        url: '/Service/{serviceId}'
    });
};

export const putServiceByServiceId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutServiceByServiceIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutServiceByServiceIdResponse, PutServiceByServiceIdError, ThrowOnError>({
        ...options,
        url: '/Service/{serviceId}'
    });
};

export const deleteServiceByServiceId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteServiceByServiceIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteServiceByServiceIdResponse, DeleteServiceByServiceIdError, ThrowOnError>({
        ...options,
        url: '/Service/{serviceId}'
    });
};