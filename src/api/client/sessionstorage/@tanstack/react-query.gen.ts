// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetApiProcessStateByUserIdByProcessNameData, PostApiProcessStateData, PostApiProcessStateError, PostApiProcessStateResponse, DeleteApiProcessStateByStateIdData, DeleteApiProcessStateByStateIdError, DeleteApiProcessStateByStateIdResponse } from '../types.gen';
import { client, getApiProcessStateByUserIdByProcessName, postApiProcessState, deleteApiProcessStateByStateId } from '../sdk.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getApiProcessStateByUserIdByProcessNameQueryKey = (options: OptionsLegacyParser<GetApiProcessStateByUserIdByProcessNameData>) => [
    createQueryKey('getApiProcessStateByUserIdByProcessName', options)
];

export const getApiProcessStateByUserIdByProcessNameOptions = (options: OptionsLegacyParser<GetApiProcessStateByUserIdByProcessNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProcessStateByUserIdByProcessName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProcessStateByUserIdByProcessNameQueryKey(options)
    });
};

export const postApiProcessStateQueryKey = (options?: OptionsLegacyParser<PostApiProcessStateData>) => [
    createQueryKey('postApiProcessState', options)
];

export const postApiProcessStateOptions = (options?: OptionsLegacyParser<PostApiProcessStateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProcessState({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProcessStateQueryKey(options)
    });
};

export const postApiProcessStateMutation = (options?: Partial<OptionsLegacyParser<PostApiProcessStateData>>) => {
    const mutationOptions: UseMutationOptions<PostApiProcessStateResponse, AxiosError<PostApiProcessStateError>, OptionsLegacyParser<PostApiProcessStateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProcessState({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiProcessStateByStateIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiProcessStateByStateIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiProcessStateByStateIdResponse, AxiosError<DeleteApiProcessStateByStateIdError>, OptionsLegacyParser<DeleteApiProcessStateByStateIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProcessStateByStateId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};